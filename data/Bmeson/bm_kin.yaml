selection:
   ### use `&`, `|`, `~` for logical operations on numpy arrays
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression

new_variables:
   ### [format] name: formula
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   part_mask: ak.ones_like(part_px)
   # part_pt: np.hypot(part_px, part_py)
   # part_pt_log: np.log(part_pt)
   # part_e_log: np.log(part_energy)
   # part_logptrel: np.log(part_pt/jet_pt)
   # part_logerel: np.log(part_energy/jet_energy)
   # part_deltaR: np.hypot(part_deta, part_dphi)
   is_B: label
   is_not: 1- label
   # jet_isQ: label
   # jet_isG: 1-label

preprocess:
  ### method: [manual, auto] - whether to use manually specified parameters for variable standardization
  method: manual
  ### data_fraction: fraction of events to use when calculating the mean/scale for the standardization
  data_fraction: 0.9

inputs:
   pf_points:
      length: 128
      pad_mode: wrap
      vars: 
         - [part_px, null]
         - [part_py, null]
         # - [part_pz, null]
   pf_features:
      length: 128
      pad_mode: wrap
      vars: 
         - [part_px, null]
         - [part_py, null]
         - [part_pz, null]
         - [part_energy, null]
         - [part_mass, null]
         # - [thrust, null]
         # - [sphericity, null]
         # - [aplanarity, null]
         # - [part_charge, null]
      ### [format 1]: var_name (no transformation)
      ### [format 2]: [var_name, 
      ###              subtract_by(optional, default=None, no transf. if preprocess.method=manual, auto transf. if preprocess.method=auto), 
      ###              multiply_by(optional, default=1), 
      ###              clip_min(optional, default=-5), 
      ###              clip_max(optional, default=5), 
      ###              pad_value(optional, default=0)]
   pf_vectors:
      length: 128
      pad_mode: wrap
      vars: 
         - [part_px, null]
         - [part_py, null]
         - [part_pz, null]
         - [part_energy, null]
         # - [part_mass, null]
   pf_mask:
      length: 128
      pad_mode: constant
      vars: 
         - [part_mask, null]
      
   event_features:
      length: 1
      pad_mode: constant
      vars:
      - [thrust]
      - [sphericity]
      - [aplanarity]

labels:
   ### type can be `simple`, `custom`
   ### [option 1] use `simple` for binary/multi-class classification, then `value` is a list of 0-1 labels
   # type: simple 
   # value: [jet_isQ, jet_isG]
   # this is for classification

   ### [option 2] otherwise use `custom` to define the label, then `value` is a map
   # type: custom
   # value: 
   #    truth_label: mass
   # this is for regression

   type: simple
   value: [is_B, is_not]

observers:
   # - jet_pt
   # - jet_eta
   - part_energy
   - part_mass

weights: